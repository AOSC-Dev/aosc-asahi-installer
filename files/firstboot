#!/bin/sh
# SPDX-License-Identifier: MIT

set -e

if [ -e "$(dirname "$0")"/functions.sh ]; then
    . "$(dirname "$0")"/functions.sh
else
    . /usr/share/asahi-scripts/functions.sh
fi

: ${BOOT_PART:="/boot"}
: ${EFI_PART:=}
: ${GRUB_DIR:="$BOOT_PART/grub"}
: ${CONFIG:="$GRUB_DIR/grub.cfg"}
: ${MODULES:="ext2 fat part_gpt search"}

umount=false

if [ -z "$EFI_PART" ] && [ -z "$TARGET" ]; then
    EFI_PART=/run/.boot-efi
    mount_boot_esp "$EFI_PART"
    umount=true
fi

: ${TARGET:="$EFI_PART/EFI/BOOT/BOOTAA64.EFI"}

fs="$(grub-probe "$BOOT_PART" -t fs)"
uuid="$(grub-probe "$BOOT_PART" -t fs_uuid)"
part="$(grub-probe "$BOOT_PART" -t drive | sed -e 's/(.*,/hd0,/' | tr -d ')')"
grub_path="$(grub-mkrelpath "$GRUB_DIR")"

if [ -z "$uuid" ]; then
    echo "Error: Unable to determine root filesystem UUID"
    exit 1
fi

echo "Filesystem: $fs"
echo "UUID: $uuid"
echo "Partition: $part"
echo "Relative path: $grub_path"


root_dev=$(findmnt -n -o SOURCE /)
efi_dev=$(findmnt -n -o SOURCE "${EFI_PART}")

if [ -e "$root_dev" ]; then
    echo "Randomizing root filesystem UUID..."
    tune2fs -U random "$root_dev"

    root_uuid="$(blkid -c /dev/null "$root_dev" -o export | grep '^UUID=')"
    echo "Root filesystem: $root_uuid"
    echo
fi

if [ -e "$efi_dev" ] && \
    blkid "$efi_dev" | grep -q 'TYPE="vfat"'; then

    echo "Randomizing EFI system partition UUID..."
    # Ugly... why isn't there a command to do this?
    ssize="$(blockdev --getss "$efi_dev")"
    dd bs=1 seek=67 count=4 conv=notrunc if=/dev/urandom of="$efi_dev"
    dd bs=1 skip=67 seek=$((67+6*$ssize)) count=4 conv=notrunc if="$efi_dev" of="$efi_dev"

    efi_uuid="$(blkid -c /dev/null "$efi_dev" -o export | grep '^UUID=')"
    echo "EFI partition: $efi_uuid"
    echo
fi

if [ ! -z "$root_uuid" ] && [ ! -z "$efi_uuid" ]; then
    echo "Regenerating /etc/fstab..."
    tee /etc/fstab <<EOF
$root_uuid / ext4 rw,relatime,x-systemd.growfs 0 1
$efi_uuid /boot/efi vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro    0 2
EOF
    echo
fi

grub-install --removable --efi-directory="$EFI_PART"
update-grub
